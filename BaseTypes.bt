//////////////////////////////////////////////////
// VLQ Stuff
//////////////////////////////////////////////////

typedef struct {
    do
    {
        unsigned char more : 1;
        unsigned char val  : 7;
    }
    while(more);
} VLQU <read=VLQURead, write=VLQUWrite>;

uint64 VLQUValue(VLQU &u) {
    local uint64 result;
    local uint i;
    
    result = 0;
    i = 0;
    
    do
    {
        result = (result << 7) | (u.val[i]);
    }
    while(u.more[i++]);
    
    return result;
}

void VLQUEncode(VLQU &u, uint64 target) {
    //Does not normalize, to try to keep the field the same length.

    local uint b = 0;
    while(u.more[b++]);

    Assert(target < (1 << (7 * b)), "There's not enough room to make that change.");

    local uint i;
    for(i = 0; i < b; i++)
    {
        u.val[i] = (target >> (7 * (b - i - 1))) & 0x7f;
    }
}

string VLQURead(VLQU &u) {
    local string s;
    s = SPrintf(s, "%Lu", VLQUValue(u));
    return s;
}

void VLQUWrite(VLQU &u, string s) {
    local uint64 value;
    SScanf(s, "%Lu", value);
    VLQUEncode(u, value);
}

typedef VLQU VLQS <read=VLQSRead, write=VLQSWrite>;

int64 VLQSValue(VLQS &u) {
    local uint64 value;
    value = VLQUValue(u);
    
    return value - 1;
}

void VLQSEncode(VLQS &u, int64 i) {
    local uint64 value;
    value = i + 1;
    VLQUEncode(u, value);
}

string VLQSRead(VLQS &u) {
    local string s;
    s = SPrintf(s, "%Ld", VLQSValue(u));
    return s;
}

void VLQSWrite(VLQS &u, string s) {
    local int64 value;
    SScanf(s, "%Ld", value);
    VLQSEncode(u, value);
}

typedef VLQU VLQI <read=VLQIRead, write=VLQIWrite>;

int64 VLQIValue(VLQI &u) {
    local uint64 value;
    local int64 newValue;
    value = VLQUValue(u);

    newValue = value >> 1;
    if (value & 1) {
        newValue = ~newValue;
    }

    return newValue;
}

void VLQIEncode(VLQI &u, int64 i) {
    local uint64 value;
    i <<= 1;

    if (i < 0) {
        i = ~i;
        i |= 1;
    }

    value = i;

    VLQUEncode(u, value);
}

string VLQIRead(VLQI &u) {
    local string s;
    s = SPrintf(s, "%Ld", VLQIValue(u));
    return s;
}

void VLQIWrite(VLQI &u, string s) {
    local int64 value;
    SScanf(s, "%Ld", value);
    VLQIEncode(u, value);
}

typedef unsigned char bool;

typedef struct {
    bool Initialized;
    unsigned char Data[16];
} UUID <read=UUIDRead, write=UUIDWrite>;

string UUIDRead(UUID &uuid) {
    local string s;
    if(!uuid.Initialized)
    {
        s = "";
    }
    else
    {
        s = SPrintf(s, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
                        uuid.Data[0], uuid.Data[1], uuid.Data[2], uuid.Data[3], uuid.Data[4], uuid.Data[5], uuid.Data[6], uuid.Data[7],
                        uuid.Data[8], uuid.Data[9], uuid.Data[10], uuid.Data[11], uuid.Data[12], uuid.Data[13], uuid.Data[14], uuid.Data[15]);
    }
    return s;
}

void UUIDWrite(UUID &uuid, string newid)
{
    local int len = Strlen(newid);
    if(len == 0)
    {
        uuid.Initialized = 0;
        Memset(uuid.Data, 16, 0);
        return;
    }
    local uchar newid_bytes[16] = {0};
    Assert(len == 32, "Not a valid UUID.");
    local int cnt = SScanf(newid, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
                        newid_bytes[0], newid_bytes[1], newid_bytes[2], newid_bytes[3], newid_bytes[4], 
                        newid_bytes[5], newid_bytes[6], newid_bytes[7], newid_bytes[8], newid_bytes[9], 
                        newid_bytes[10], newid_bytes[11], newid_bytes[12], newid_bytes[13], newid_bytes[14], newid_bytes[15]);
    Assert(cnt == 16, "Not a valid UUID.");
    uuid.Initialized = 1;
    Memcpy(uuid.Data, newid_bytes, 16);
    return;
}

typedef struct {
    VLQU Length;
    char String[VLQUValue(Length)] <optimize=false>;
} UTF8Str <read=UTF8StrRead>;

string UTF8StrRead(UTF8Str &str)
{
    local string s;
    if(VLQUValue(str.Length) > 0)
    {
        s = SPrintf(s, "%s", str.String);
    }
    else
    {
        s = "";
    }
    return s;
}
