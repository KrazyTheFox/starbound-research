//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

//////////////////////////////////////////////////
// VLQ Stuff
//////////////////////////////////////////////////

typedef struct {
    ubyte val <comment="VLQ element">;
    if(val > 0x7f) {
        ubyte val <comment="VLQ element">;
        if (val > 0x7f) {
            ubyte val <comment="VLQ element">;
            if(val > 0x7f) {
                ubyte val <comment="VLQ element">;
                if(val > 0x7f) {
                    ubyte val <comment="VLQ element">;
                }
            }
        }
    }
} VLQU <read=VLQURead, comment="Unsigned little-endian variable length quantity">;

// get the actual uint value of the VLQ
uint VLQUValue(VLQU &u) {
    local uint result;
    local ubyte cur;
    local uint i;
    
    result = u.val[0];
    if(result & 0x80)
    {
        result &= 0x7F;
        i = 1;
        do
        {
            cur = u.val[i++];
            result = (result << 7) + (cur & 0x7F);
        }
        while(cur & 0x80);
    }

    return result;
}

string VLQURead(VLQU &u) {
    local string s;
    s = SPrintf(s, "%d", VLQUValue(u));
    return s;
}

typedef VLQU VLQS <read=VLQSRead>;

int VLQSValue(VLQS &u)
{
    local uint value;
    value = VLQUValue(u);

    if(value == 0)
    {
        return -1;
    }
    else
    {
        return value - 1;
    }
}

string VLQSRead(VLQS &u) {
    local string s;
    s = SPrintf(s, "%d", VLQSValue(u));
    return s;
}

typedef unsigned char bool;

typedef struct {
    bool Initialized;
    unsigned char Data[16];
} UUID;

typedef struct {
    VLQU Length;
    char String[VLQUValue(Length)] <optimize=false>;
} UTF8Str <read=UTF8StrRead>;

string UTF8StrRead(UTF8Str &str) {
    local string s;
    if(VLQUValue(str.Length) > 0)
    {
        s = SPrintf(s, "%s", str.String);
    }
    else
    {
        s = "";
    }
    return s;
}

typedef enum <unsigned char> {
    MALE,
    FEMALE
} GenderType;

typedef struct {
    unsigned char R;
    unsigned char G;
    unsigned char B;
    unsigned char A;
} RGBAColor;

// Not 100% sure on this
typedef struct {
    float R;
    float G;
    float B;
} RGB3F;

typedef struct {
    float X;
    float Y;
} Vec2F;

typedef struct {
    UTF8Str Idle;
    UTF8Str ArmIdle;
    Vec2F HeadOffset;
    Vec2F ArmOffset;
} Personality;

typedef struct {
    UTF8Str Name;
    UTF8Str Species;
    GenderType Gender;
    UTF8Str HairGroup;
    UTF8Str HairType;
    UTF8Str HairDirectives;
    UTF8Str BodyDirectives;
    UTF8Str FacialHairGroup;
    UTF8Str FacialHairType;
    UTF8Str FacialHairDirectives;
    UTF8Str FacialMaskGroup;
    UTF8Str FacialMaskType;
    UTF8Str FacialMaskDirectives;
    Personality _Personality;
    RGBAColor FavoriteColor;
} HumanoidIdentity;

typedef struct {
    bool GodMode;
    Vec2F BodyTemperatureRangeLow;
    float IdealTemperature;
    float BaseMaxWarmth;
    float WarmthTransferRate_MANIPULATED;  // baseMaxWarmth * 0.016666668 / warmthTransferRate
    float WarmthTransferRateCap;
    float ComfortRegen;
    float BaseMaxHealth;
    float BaseMaxEnergy;
    float EnergyReplenishmentRate;
    float BaseMaxFood;
    float FoodDepletionRate; 
    float BaseMaxBreath;
    float BreathReplenishmentRate;
    float BreathDepletionRate;
    float WindChillFactor;
    UTF8Str BodyMaterialKind;
    UTF8Str DamageConfig;
} StatusEntityParameters;

typedef struct {
    float Value;
    float Maxmium;
} StatusValue;

typedef struct {
    VLQU Size;
    UTF8Str Strings[VLQUValue(Size)] <optimize=false>; 
} StringList;

typedef struct {
    StatusValue Health;
    StatusValue Energy;
    StatusValue Warmth; // Is this right?
    StatusValue Food;
    StatusValue Breath;
    bool Invulnerable;
    RGB3F GlowColor;
    StringList UnknownStrList1;
    StringList UnknownStrList2;
} Status;

struct Variant {
    unsigned char VariantType;
    if(VariantType == 7)
    {
        struct VariantMap Data;
    }
    else if(VariantType == 2)
    {
        double Data;
    }
    else if(VariantType == 5)
    {
        UTF8Str Data;
    }
    else if(VariantType == 4)
    {
        VLQS Data;
    }
    else if(VariantType == 3)
    {
        bool Data;
    }
    else if(VariantType == 6)
    {
        struct VariantList Data;
    }
};

struct VariantMapPair {
    UTF8Str Key;
    struct Variant Value;
};

struct VariantMap {
    VLQU Size;
    struct VariantMapPair Variants[VLQUValue(Size)] <optimize=false>;
};

struct VariantList {
    VLQU Size;
    struct Variant Variants[VLQUValue(Size)] <optimize=false>;
};

typedef struct {
    UTF8Str Name;
    VLQS StackSize;
    struct Variant ItemVariant;
} ItemDescriptor;

typedef struct {
    VLQU BagSize;
    ItemDescriptor Items[VLQUValue(BagSize)] <optimize=false>;
} ItemBag;

typedef struct {
    VLQU DatastreamSize;
    unsigned char Unknown1[8];
    ItemBag Bag1;
    ItemBag Bag2;
    ItemBag Hotbar;
} PlayerInventory;

typedef struct {
    unsigned char Header[6];
    int VersionNumber; // Hard coded as 418 at the moment
    VLQU DatastreamSize;
    UUID PlayerUUID;
    HumanoidIdentity Identity;
    StatusEntityParameters StatusEntityParms;
    Status PlayerStatus;
    UTF8Str Description;
    double PlayTime;
    PlayerInventory Inventory;
} StarSave;

StarSave Save;
